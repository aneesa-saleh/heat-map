
class HeatMapContainer extends React.Component{
  constructor(props){
    super(props);
    this.state = {heatData: {}};
  }

  componentDidMount(){
    let request = obj => {
      return new Promise((resolve,reject) => {
        let xhr = new XMLHttpRequest();
        xhr.open("GET", obj.url);
        xhr.onload = () => {
          if(xhr.status >= 200 && xhr.status < 300)
            resolve(xhr.response);
          else
            reject(xhr.statusText);
        };
        xhr.onerror = () => reject(xhr.statusText);
        xhr.send(obj.body);
      });
    };
    let url = "https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/global-temperature.json";
    request({url})
        .then((data) => {
            let heatData = JSON.parse(data);
            this.setState({heatData});
        });
  }
  render(){
    return (
      <HeatMap heatData={this.state.heatData} />
    );
  }
}

class HeatMap extends React.Component{
  componentDidUpdate(){
    let margin = {
        top: 20,
        bottom: 100,
        left: 100,
        right: 20
      }
      let w = 1200, h = 550, width = w - margin.left - margin.right, height = h - margin.top - margin.bottom;
      let svg = d3.select(".svg-container")
                  .append("svg")
                  .attr("id","chart")
                  .attr("width",w)
                  .attr("height",h);
      let chart = svg.append("g")
                  .classed("inner-chart", true)
                  .attr("width",width)
                  .attr("height",height)
                  .attr("transform",`translate(${margin.left},${margin.top})`);
    
    if(this.props.heatData.baseTemperature){
      let months = ["January","February","March","April","May","June","July","August","September","October","November","December"];
      let baseTemperature = this.props.heatData.baseTemperature;
      let monthlyVariance = this.props.heatData.monthlyVariance.map((d) => {
        return {
          year: new Date(d.year, d.month - 1, 1),
          month: months[d.month - 1],
          variance: d.variance,
          abs: (baseTemperature + d.variance).toFixed(3)
        }
      });
      
      let years = [];
      let i = 1, j = 0, length = monthlyVariance.length;
      years[0] = monthlyVariance[0].year;
      while(i < length){
          if(monthlyVariance[i].year.getFullYear() != years[j].getFullYear() ){
            j++;
            years.push(monthlyVariance[i].year)
          }
          i++;
      }

      let x = d3.scaleBand()
              .domain(years)
              .range([0, width])
      
      let y = d3.scaleBand()
              .domain(months)
              .range([0, height]);
      
      let colorScale = d3.scaleLinear()
            .domain([0, 2, 5, 7, 10])
            .range(['#004ed6', '#7ba5c4', '#eae6da', '#e0b5a6', '#a32600']);
      
      // .domain([1, 3, 5, 8, 10])
      // .range(['#6e2da3', '#76bc3e', '#f4f2ab', '#ff9000', '#d80404']);
     //"blue","green","yellow","orange","red" 
      let xAxis = d3.axisBottom()
              .scale(x)
              .tickFormat(d3.timeFormat("%Y"))
              .tickValues(x.domain().filter((d,i) => (d.getFullYear() % 10) == 0));
      
      let yAxis = d3.axisLeft()
              .scale(y);
      
      // {
      //     year: new Date(d.year, d.month - 1, 1),
      //     month: months[d.month - 1],
      //     variance: d.variance,
      //     abs: (baseTemperature + d.variance).toFixed(3)
      //   }
      
      let tip = d3.tip()
                .attr("class","d3-tip")
                .offset([-5,0])
                .html((d) => {
                  let year = `${d.year.getFullYear()} - ${d.month}`;
                  let variance = d.variance > 0 ? "+" + d.variance : d.variance;
                  return `<div class="year-month"><strong>${year}</strong></div><div class="abs-temp">${d.abs} ℃</div><div class="var-temp">${variance} ℃</div>`;
                });
      
      chart.append("g")
          .classed("x axis", true)
          .attr("transform", `translate(0,${height})`)
          .call(xAxis);
      
      chart.append("g")
          .classed("y axis", true)
          .call(yAxis);
      
      chart.select(".y.axis")
        .append("text")
        .classed("axis-label", true)
        .attr("transform", `translate(-70,${height/2}) rotate(-90)`)
        .text("Months")
        .style("fill","black");
      
      chart.select(".x.axis")
        .append("text")
        .classed("axis-label", true)
        .attr("transform", `translate(${width/2},45)`)
        .text("Years")
        .style("fill","black");
      
      let valuesMap = [0.0, 2.7, 3.9, 5.0, 6.1, 7.2, 8.3, 9.4, 10.5, 11.6, 12.7];
      let format = d3.format(".1f");

      let colorValue = (temp) => {
        if(temp < 0)
          return 0;
        else if(temp >= 12.7)
          return 9;
        
        for(let i = 0; i < 10; i++){
          if(temp < valuesMap[i + 1])
            return i;
        }
      };
      
      let bars = chart.selectAll(".bar")
        .data(monthlyVariance)
        .enter()
            .append("rect")
            .classed("bar", true);
      
      bars.attr("y", (d) => y(d.month))
        .attr("x", (d) => {
          let date = new Date(d.year.getFullYear(), 0, 1);
          return x(date);
        })
        .attr("width", x.bandwidth())
        .attr("height", y.bandwidth())
        .style("fill", (d) => {
          let val = colorValue(d.abs);
          return colorScale(val);
        })
        .on("mouseover", tip.show)
        .on("mouseout", tip.hide);;
      
      bars.exit()
        .remove();
     
      let colorKey = chart.append("g")
        .attr("width", 400)
        .attr("transform", `translate(${width-445},${height+60})`);
      
      let colorKeyRects = colorKey.append("g")
        .attr("width", 400)
        .attr("height", 15);
      
      colorKeyRects.selectAll(".key")
        .data(valuesMap)
        .enter()
            .append("g")
            .classed("key", true);
      
      colorKeyRects.selectAll(".key")
          .append("rect")
          .attr("width", 40)
          .attr("height", 15)
          .classed("key-rect",true)
          .attr("x", (d,i) => i * 40)
          .attr("fill", (d,i) => colorScale(i));
      
      colorKeyRects.selectAll(".key")
          .append("text")
          .text((d) => format(d))
          .attr("x", (d,i) => i * 40)
          .classed("key-text", true)
          .style("text-anchor", "middle")
          .attr("transform", "translate(0,30)");
      
      colorKeyRects.selectAll(".key")
        .exit()
        .remove();
      
      svg.call(tip);
    }
  }
  
  render(){
    return (
      <div>
        <h1>Monthly Global Land-Surface Temperature</h1>
        <h2>1753 - 2015</h2>
        <p>Temperatures are in Celsius and reported as anomalies relative to the Jan 1951-Dec 1980 average.<br/>Estimated Jan 1951-Dec 1980 absolute temperature ℃: 8.66 +/- 0.07</p>
        <div className="svg-container" />
      </div>
    );
  }
}

ReactDOM.render(<HeatMapContainer />, document.querySelector("#root"));